#include "cuda_runtime.h"
#include "device_launch_parameters.h"

#include <stdio.h>


__global__ void mult(int* a, int* b, int* c) {
    int i = threadIdx.x;
    c[i] = a[i] * b[i];
}

int main()
{
    const int n = 3;
    int size = n * sizeof(n);
    const int a[n] = { 3, 1, 2 };
    const int b[n] = { 0, 1, 1 };
    int c[n] = { 0, 0, 0 };

    int* d_a = 0;
    int* d_b = 0;
    int* d_c = 0;

    cudaMalloc((void**)&d_a, size);
    cudaMalloc((void**)&d_b, size);
    cudaMalloc((void**)&d_c, size);

    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size, cudaMemcpyHostToDevice);

    mult << <1, N >> > (d_a, d_b, d_c);
    cudaDeviceSynchronize();

    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);


    printf("{3,1,2} * {0,1,1} = {%d,%d,%d}\n", c[0], c[1], c[2]);

    cudaDeviceReset();

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    return 0;
}
